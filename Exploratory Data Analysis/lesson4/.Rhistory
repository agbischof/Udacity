library(ggplot2)
data(diamonds)
names(diamonds)
str(diamonds)
diamonds$color
qplot(price, data = diamonds, binwidth = 100)
library(ggplot2)
data(diamonds)
names(diamonds)
str(diamonds)
diamonds$color
qplot(price, data = diamonds, binwidth = 100)
library(ggplot2)
data(diamonds)
```{r Pseudo-Facebook User Data}
qplot(price, data = diamonds, binwidth = 100)
install.packages('knitr')
setwd('/Users/abischof/code/Udacity/Exploratory Data Analysis/ProblemSet3/')
library(ggplot2)
data(diamonds)
names(diamonds)
str(diamonds)
diamonds$color
qplot(price, data = diamonds, binwidth = 100)
summary(diamonds$price)
sum(diam500$price < 500)
sum(diamonds$price < 250)
sum(diamonds$price >= 15000)
qplot(price, data = diamonds, binwidth = 10) +
scale_x_continuous(limits = c(300,1500), breaks = seq(0,6000, 50))
qplot(price, data = diamonds, binwidth = 100,
xlab = 'Diamond Price ($)', ylab = 'Number of Diamonds') +
scale_x_continuous(breaks = seq(0,150000, 5000)) +
facet_wrap(~cut, ncol = 1)
by(diamonds$price, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, min)
by(diamonds$price, diamonds$cut, median)
tapply(diamonds$price, diamonds$cut, summary)
qplot(price, data = diamonds, binwidth = 200,
xlab = 'Diamond Price ($)', ylab = 'Number of Diamonds') +
scale_x_continuous(limits = c(0,20000),
breaks = seq(0,150000, 5000)) +
facet_wrap(~cut, ncol = 1, scales = 'free_y')
qplot(price/carat, data = diamonds, binwidth = 200,
xlab = 'Diamond Price($)/Carat', ylab = 'Number of Diamonds') +
scale_x_log10() +
facet_wrap(~cut, ncol = 1, scales = 'free_y')
qplot(price/carat, data = diamonds, binwidth = 200,
xlab = 'Diamond Price($)/Carat', ylab = 'Number of Diamonds') +
scale_x_log10() +
facet_wrap(~cut, ncol = 1, scales = 'free_y')
qplot(price/carat, data = diamonds, binwidth = 0.02,
color = I('black'), fill = I('#5760AB'),
xlab = 'Diamond Price/Carat', ylab = 'Number of Diamonds') +
scale_x_log10() +
facet_wrap(~cut, ncol = 1, scales = 'free_y')
qplot(price/carat, data = diamonds, binwidth = 200,
xlab = 'Diamond Price($)/Carat', ylab = 'Number of Diamonds') +
scale_x_log10() +
facet_wrap(~cut, ncol = 1, scales = 'free_y')
qplot(price/carat, data = diamonds, binwidth = 0.02,
color = I('black'), fill = I('#5760AB'),
xlab = 'Diamond Price/Carat', ylab = 'Number of Diamonds') +
scale_x_log10() +
facet_wrap(~cut, ncol = 1, scales = 'free_y')
qplot(x = cut, y = price,
data = diamonds,
geom = 'boxplot')+
coord_cartesian()
qplot(x = cut, y = price,
data = diamonds,
geom = 'boxplot')+
coord_cartesian(ylim = c(0,7000))
tapply(diamonds$price, diamonds$cut, summary)
qplot(x = clarity, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian()
qplot(x = clarity, y = price,
data = diamonds,
geom = 'boxplot')+
coord_cartesian(ylim = c(0,7000))
tapply(diamonds$price, diamonds$clarity, summary)
qplot(x = color, y = price,
data = diamonds,
geom = 'boxplot') +
coord_cartesian()
qplot(x = color, y = price,
data = diamonds,
geom = 'boxplot')+
coord_cartesian(ylim = c(0,8000))
by(diamonds$price, diamonds$color, summary)
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian()
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian(ylim = c(0,6000))
qplot(x = color, y = price/carat,
data = diamonds,
geom = 'boxplot') +
coord_cartesian() +
facet_wrap(~clarity)
BC = read.csv('BreastCancerMortaility.csv', na.strings='NA', header = T, row.names=1, blank.lines.skip=T)
BC$country = rownames(BC)
qplot(BCy$year, BCy$Australia)
HSpend = read.csv('HealthSpending.csv', na.strings='NA', header=T, row.names=1, blank.lines.skip=T)
HSpend$country = rownames(HSpend)
qplot(x = X2002, data = BC, binwidth = 20)
summary(HSpend$X2002)
qplot(x = X2002, data = BC, binwidth = 2)
qplot(x = X2002, data = BC, binwidth = 1)
BCandHS = merge(BC[,c('X2002', 'country')], HSpend[,c('X2002', 'country')], by='country')
qplot(x = X2002.x, data = BCandHS)
qplot(x = X2002.x, data = BCandHS, binwidth = 2)
qplot(x = X2002.y, data = BCandHS, binwidth = 2)
qplot(x = X2002.y, data = BCandHS, binwidth = 10)
qplot(x = X2002.y, data = BCandHS, binwidth = 20)
summary(BCandHS$2002.x)
summary('BCandHS$2002.x')
summary(BCandHS$2002.x)
View(BCandHS)
summary(BCandHS$2002.x)
summary(BCandHS$2002.y)
View(BCandHS)
?rename
?rename
library(plyr)
?rename
summary(BCandHS$X2002.y)
summary(BCandHS$X2002.x)
summary(BCandHS$X2002.y)
qplot(BC)
View(BC)
BC$country = rownames(BC[,])
BC = read.csv('BreastCancerMortaility.csv', na.strings='NA', header = T, row.names=1, blank.lines.skip=T)
qplot(BC)
qplot(BC[,])
View(BC)
qplot(x = X1950:X2002, data = BC)
qplot(x = X2002, data = BC)
qplot(x = X2001, data = BC)
###library(reshape2)
library(reshape2)
meltBC = melt(BC)
summary(BCandHS$X2002.y)
BCandHS$HS = if(BCandHS$X2002.y<=24.21, vl)
BCandHS$HS = if(BCandHS$X2002.y <= 24.21, 'vl')
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', 0)
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', NA)
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', NA)
BCandHS$HS = ifelse(BCandHS$X2002.y >= 24.21 && BCandHS$X2002.y <= 105.00, 'l', BCandHS$HS)
View(BCandHS)
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', NA)
?if
?if
?if
else
?ifelse
BCandHS$2002.y <= 24.21
BCandHS$X2002.y <= 24.21
BC = read.csv('BreastCancerMortaility.csv', na.strings='NA', header = T, row.names=1, blank.lines.skip=T)
BC$country = rownames(BC)
HSpend = read.csv('HealthSpending.csv', na.strings='NA', header=T, row.names=1, blank.lines.skip=T)
HSpend$country = rownames(HSpend)
BCandHS = merge(BC[,c('X2002', 'country')], HSpend[,c('X2002', 'country')], by='country')
View(BCandHS)
qplot(x = X2002.x, data = BCandHS, binwidth = 20)
qplot(x = X2002.y, data = BCandHS, binwidth = 20)
summary(BCandHS$X2002.y)
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', NA)
View(BCandHS)
BCandHS$HS = ifelse(BCandHS$X2002.y >= 24.21 && BCandHS$X2002.y <= 105.00, 'l', BCandHS$HS)
View(BCandHS)
View(BCandHS)
BCandHS$HS = NA
View(BCandHS)
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', NA)
View(BCandHS)
BCandHS$X2002.y >= 24.21 && BCandHS$X2002.y <= 105.00
BCandHS$X2002.y >= 24.21 & BCandHS$X2002.y <= 105.00
BCandHS$HS = ifelse(BCandHS$X2002.y >= 24.21 & BCandHS$X2002.y <= 105.00, 'l', BCandHS$HS)
BCandHS$HS = ifelse(BCandHS$X2002.y >= 24.21 & BCandHS$X2002.y <= 105.00, 'l', BCandHS$HS)
View(BCandHS)
summary(BCandHS$X2002.y)
BCandHS$HS = ifelse(BCandHS$X2002.y > 105.00 & BCandHS$X2002.y <= 376.10, 'h', BCandHS$HS)
View(BCandHS)
BCandHS$HS = ifelse(BCandHS$X2002.y > 376.10, 'vh', BCandHS$HS)
View(BCandHS)
BCandHS$HS = NA
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', NA)
BCandHS$HS = ifelse(BCandHS$X2002.y > 24.21 & BCandHS$X2002.y <= 105.00, 'l', BCandHS$HS)
BCandHS$HS = ifelse(BCandHS$X2002.y > 105.00 & BCandHS$X2002.y <= 376.10, 'h', BCandHS$HS)
BCandHS$HS = ifelse(BCandHS$X2002.y > 376.10, 'vh', BCandHS$HS)
BCandHS$HS = NA
View(BCandHS)
BCandHS$HS = ifelse(BCandHS$X2002.y <= 24.21, 'vl', NA)
BCandHS$HS = ifelse(BCandHS$X2002.y > 24.21 & BCandHS$X2002.y <= 105.00, 'l', BCandHS$HS)
BCandHS$HS = ifelse(BCandHS$X2002.y > 105.00 & BCandHS$X2002.y <= 376.10, 'h', BCandHS$HS)
BCandHS$HS = ifelse(BCandHS$X2002.y > 376.10, 'vh', BCandHS$HS)
View(BCandHS)
qplot(x = X2002.x, data = subset(BCandHS, !is.na(X2002.y)),
binwidth = 10) +
scale_x_continuous() +
facet_wrap(~HS)
qplot(x = X2002.x, data = subset(BCandHS, !is.na(X2002.y)),
binwidth = 1) +
scale_x_continuous() +
facet_wrap(~HS)
qplot(x = X2002.x, data = subset(BCandHS, !is.na(X2002.y)),
binwidth = 2) +
scale_x_continuous() +
facet_wrap(~HS)
qplot(x = X2002.x, y = ..count../sum(..count..),
data = subset(BCandHS, !is.na(X2002.y)),
xlab = 'Breast Cancer Mortality',
ylab = 'Proportion of countries',
binwidth = 2, geom = 'freqpoly', color = HS) +
scale_x_continuous()
hsLevels = c("vl", "l", "h", "vh")
BCandHS$HS = factor(BCandHS$HS, levels = hsLevels)
qplot(x = X2002.x, data = subset(BCandHS, !is.na(X2002.y)),
binwidth = 2) +
scale_x_continuous() +
facet_wrap(~HS)
qplot(x = X2002.x, data = subset(BCandHS, !is.na(X2002.y)),
binwidth = 1) +
scale_x_continuous() +
facet_wrap(~HS)
qplot(x = X2002.x, y = ..count../sum(..count..),
data = subset(BCandHS, !is.na(X2002.y)),
xlab = 'Breast Cancer Mortality',
ylab = 'Proportion of countries',
binwidth = 2, geom = 'freqpoly', color = HS) +
scale_x_continuous()
qplot(x = X2002.x, y = ..count../sum(..count..),
data = subset(BCandHS, !is.na(X2002.y)),
xlab = 'Breast Cancer Mortality',
ylab = 'Proportion of countries',
binwidth = 1, geom = 'freqpoly', color = HS) +
scale_x_continuous()
qplot(x = X2002.x, y = ..count../sum(..count..),
data = subset(BCandHS, !is.na(X2002.y)),
xlab = 'Breast Cancer Mortality',
ylab = 'Proportion of countries',
binwidth = 5, geom = 'freqpoly', color = HS) +
scale_x_continuous()
qplot(x = X2002.x, y = ..count../sum(..count..),
data = subset(BCandHS, !is.na(X2002.y)),
xlab = 'Breast Cancer Mortality',
ylab = 'Proportion of countries',
binwidth = 4, geom = 'freqpoly', color = HS) +
scale_x_continuous()
qplot(x = HS, y = X2002.x,
data = subset(BCandHS, !is.na(X2002.y)),
geom = 'boxplot')
qplot(x = HS, y = X2002.x,
data = subset(BCandHS, !is.na(X2002.y)),
xlab = 'Health Spending',
ylab = 'Breast Cancer Mortaility',
geom = 'boxplot')
qplot(x = X2002, data = BC)
BC$country = rownames(BC)
HSpend = read.csv('HealthSpending.csv', na.strings='NA', header=T, row.names=1, blank.lines.skip=T)
HSpend$country = rownames(HSpend)
BCandHS = merge(BC[,c('X2002', 'country')], HSpend[,c('X2002', 'country')], by='country')
BCt = data.frame(t(BC))
View(BCt)
View(BCt)
qplot(x = row.names, y = Australia, data = BC)
qplot(x = row.names, y = Australia, data = BCt)
qplot(x = X2002, data = BC)
qplot(x = c(X2002, X2001, X2000), data = BC)
qplot(x = X2002, data = BC)
qplot(x = c(X2002, X2001, X2000), data = BC)
qplot(x = X2002, data = BC)
qplot(x = c(X1950:X2002), data = BC)
qplot(x = c(X1951:X2002), data = BC)
qplot(x = c(X1999, X2000, X2001, X2002), data = BC)
qplot(x = c(X1990, X1991, X1992, X1993, X1994, X1995, X1996, X1997, X1998, X1999, X2000, X2001, X2002), data = BC)
qplot(x = X2002, data = BC)
qplot(Australia, data = BCt)
qplot(x = X2002, data = BC)
BCandHS02 = merge(BC[,c('X2002', 'country')], HSpend[,c('X2002', 'country')], by='country')
BCandHS = merge(BC[,c(, 'country')], HSpend[,c(, 'country')], by='country')
BCandHS = merge(BC, HSpend, by='country')
View(BCandHS)
getpw()
getwd()
setwd('/Users/abischof/code/Udacity/Exploratory Data Analysis/lesson4')
library(ggplot2)
pf = read.csv('pseudo_facebook.tsv', sep = '/t')
pf = read.csv('pseudo_facebook.tsv', sep = '\t')
rm(list = ls())
pf = read.csv('pseudo_facebook.tsv', sep = '\t')
qplot(x = age, y = friend_count, data = pf)
qplot(age, friend_count, data = pf)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point()
summary(pf$age)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point() + xlim(13, 90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13, 90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_jitter(alpha = 1/20) +
xlim(13, 90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_jitter(alpha = 1/20) +
xlim(13, 90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13, 90) +
coord_trans(y = 'sqrt')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13, 90) +
coord_trans(y = 'sqrt')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0)) +
xlim(13, 90) +
coord_trans(y = 'sqrt')
names(pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf)
qplot(aes(x = age, y = friendships_initiated), data = pf)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point()
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
xlim(13,90) +
geom_point(alpha = 1/20)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
xlim(13,90) +
geom_point(alpha = 1/20) +
coord_trans(y = 'sqrt')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
xlim(13,90) +
geom_point(alpha = 1/20, position = position_jitter(h=0)) +
coord_trans(y = 'sqrt')
library(dplyr)
install.packages('dplyr')
install.packages('dplyr')
females = c(0.4777, 0.4875, 0.4859, 0.4754, 0.4874, 0.4864,
0.4813, 0.4787, 0.4895, 0.4797, 0.4876, 0.4859,
0.4857, 0.4907, 0.5010, 0.4903, 0.4860, 0.4911,
0.4871, 0.4725, 0.4822, 0.4870, 0.4823, 0.4973)
n = 3900 ###births/month
SDa = sd(females)
AVGa = mean(females)
SDt = sqrt(AVGa*(1-AVGa)/(n*24))
SDia = sqrt(females*(1-females)/n)
SDia
AvgSDa = mean(SDia)
?chia
?statistical test
AvgSDa - SDt
?rnorm
test = rnorm(1000,0,1)
qplot(test)
?for
()
?for()
?for
?for(
?for
(
)
?while
()
MenMh = 69.1
MenSDh = 2.9
WmMh = 63.7
WmSDh = 2.7
for(i in 1:1000)
x = mean(rnorm(100, MenMh, MenSDh))
y = mean(rnorm(100, WnMh, WnSDh))
xMy[i]=x-y
for(i in 1:1000)
x = mean(rnorm(100, MenMh, MenSDh))
for(i in 1:1000)
y = mean(rnorm(100, WnMh, WnSDh))
for(i in 1:1000)
x = mean(rnorm(100, MenMh, MenSDh))
y = mean(rnorm(100, WmMh, WmSDh))
xMy[i]=x-y
xMy = c(0:1000)
xMy = c(1:1000)
for(i in 1:1000)
x = mean(rnorm(100, MenMh, MenSDh))
y = mean(rnorm(100, WmMh, WmSDh))
xMy[i]=x-y
for(i in 1:100)
x = mean(rnorm(100, MenMh, MenSDh))
y = mean(rnorm(100, WmMh, WmSDh))
xMy[i]=x-y
xMy
xMy = c(1:100)
for(i in 1:100)
x = mean(rnorm(100, MenMh, MenSDh))
y = mean(rnorm(100, WmMh, WmSDh))
xMy[i]=x-y
for(i in 1:100)
{x = mean(rnorm(100, MenMh, MenSDh))
y = mean(rnorm(100, WmMh, WmSDh))
xMy[i]=x-y}
xMy = c(1:1000)
for(i in 1:1000)
{x = mean(rnorm(100, MenMh, MenSDh))
y = mean(rnorm(100, WmMh, WmSDh))
xMy[i]=x-y}
qplot(xMy)
stdA = sd(xMy)
MeanA = mean(xMy)
stdA = sd(xMy)
MeanA
stdA
var1 = rnorm(1000, 0, 1)
var2 = rnorm(1000, 0, 1)
fit.3 = lm(var1 ~ var2)
summary(fit.3)
plot(var1, var2)
curve(cbind(1,x) %*% coef(fit.3), add = TRUE)
?sim
